#ifndef __TOOL__
#define __TOOL__
#include <iostream>
#include <string>
#include <ctime>
#include <fstream>
#include <boost/property_tree/xml_parser.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/regex.hpp>  
#include <boost/date_time/gregorian/gregorian.hpp>  
#include <boost/algorithm/string/regex.hpp>
#include <boost/bind.hpp>
#include <boost/iostreams/filter/gzip.hpp> 
#include <boost/iostreams/filtering_stream.hpp>
#include <boost/shared_ptr.hpp>
#include <boost/enable_shared_from_this.hpp>
#include <boost/date_time/posix_time/posix_time.hpp> 
#include <boost/asio.hpp>
#include <boost/asio/streambuf.hpp>
#include <boost/asio/steady_timer.hpp>
#include <boost/algorithm/string.hpp>
#include <boost/thread.hpp>

#define printl(X) std::cout <<"[printl]"<< X << std::endl
#define print(X) std::cout << X 
#define error(X,Y) std::cout <<"[error]"<< X <<":"<< Y <<std::endl
#define debug(X,Y) std::cout <<"[debug]"<< X <<":"<< Y <<std::endl
#define useLocale imbue
#define strstrPair(X,Y) std::pair<std::string, std::string>(X,Y)
#define FilePair(X,Y) std::pair<std::string, CachedStaticFile*>(X,Y)

using namespace std;
namespace Tool{
	inline bool compareStarUrl(std::string &starUrl,std::string &url)
	{
		if(url.size()<(starUrl.size()-1))
			return 0;
		if(url.rfind('/')>=(starUrl.size()-1))
			return 0;
		for(size_t i=0;i<starUrl.size();++i)
		{
			if(starUrl.at(i)==42)
			{
				return 1;
			}else
			{	
				if(starUrl.at(i)!=url.at(i))
				return 0;
			}	
		}
		return 1;
	}
	inline int stringToInt(std::string &input)
	{
		char at;
		int output=0;
		for(int i=0;i<input.size();++i)
		{
			at=input.at(i);
			if(at>='0'&&at<='9')
			{
				output*=10;
				output+=at-'0';
			}
		}
		return output;
	}
	inline void substr(std::string &result,std::string &input,size_t leftstart,size_t leftstop)
	{
		result.clear();
		if(leftstop>input.size())
			leftstop=input.size();
		for(size_t i=leftstart;i<leftstop;++i)
		{
			result.push_back(input.at(i));
		}
	}
	static std::string encodeTypes[3];
	inline std::string getDate()
	{
		std::string result;
		boost::posix_time::time_facet *lf = new boost::posix_time::time_facet("%a, %d %b %Y %H:%M:%S GMT");
		std::stringstream ss;
		ss.useLocale(std::locale(ss.getloc(), lf));
		ss << boost::posix_time::second_clock::local_time();
		result = ss.str();
		return result;
	}
	inline size_t getGZIP(std::string *terget,std::ifstream &source)
	{
		if(terget==0)
		return 0;
		boost::iostreams::filtering_ostream fos;
					fos.push(boost::iostreams::gzip_compressor(boost::iostreams::gzip_params(boost::iostreams::gzip::best_compression)));
					fos.push(boost::iostreams::back_inserter(*terget));
					fos <<  source.rdbuf();
		return terget->size();
	}
	inline std::string &getGZIP(std::string &terget,const std::string &source)
	{
		boost::iostreams::filtering_ostream fos;
					fos.push(boost::iostreams::gzip_compressor(boost::iostreams::gzip_params(boost::iostreams::gzip::best_compression)));
					fos.push(boost::iostreams::back_inserter(terget));
					fos <<  source;
		return terget;
	}
	inline unsigned int getHashCode(const std::string & str)
	{
		int h = 0;
		for (int i = 0; i < str.length(); i++) {
			h = (h << 5) - h + str[i];
		}
		return h;
	}
}
#endif